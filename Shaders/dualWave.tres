[gd_resource type="Shader" format=3 uid="uid://bwt0wk7yspcta"]

[resource]
code = "shader_type canvas_item;

uniform float progress: hint_range(0.0, 1.0) = 0.5;
uniform float amplitude: hint_range(0.0, 0.15, 0.01) = 0.1;
uniform float amplitude_mult: hint_range(0.5, 1.5, 0.1) = 1.0;
uniform float frequency: hint_range(1.0, 5.0, 0.1) = 2.0;
uniform float freq_shift: hint_range(0.0, 1.0, 0.1) = 0.5;
uniform vec4 bg_color: source_color;
uniform vec4 wave_1_color: source_color;
uniform vec4 wave_2_color: source_color;
uniform float wave_1_speed = -1.0;
uniform float wave_2_speed = 1.0;

uniform float resolution = 128.0;

vec4 wave( vec2 uv, vec4 wave_color, float level, float freq, float amp, float sin_shift, float speed ){
	float sinus = sin( (uv.x + sin_shift + TIME * speed) * freq) * amp;
	float shifted_level = ( 1.0 + 2.0 * amp ) * level - amp;
	float treshold = step( 1.0 - sinus - shifted_level, uv.y);
	return wave_color * treshold;
}

void fragment() {
	vec2 pixel_uv = round(UV * resolution) / resolution;
	
	vec4 wave1 = wave(pixel_uv, wave_1_color, progress, frequency + freq_shift, amplitude * amplitude_mult, 0.0, wave_1_speed);
	vec4 wave2 = wave(pixel_uv, wave_2_color, progress, frequency, amplitude, 0.7785*TIME, wave_2_speed);
	float alpha = COLOR.a;
	vec4 combined_waves = mix(wave1, wave2, wave2.a);
	COLOR = mix( bg_color, combined_waves, combined_waves.a) * alpha;
}
"
